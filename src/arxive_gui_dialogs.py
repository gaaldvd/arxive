"""
arXive: A simple CLI/GUI frontend for rsync.

This file contains the code for the dialogs of the GUI mode of arXive.

Check the documentation for details: https://arxive.readthedocs.io

    Copyright (C) 2025 David Gaal (gaaldvd@proton.me)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

from arxive_gui import set_dir
from arxive_common import validate_options

from PySide6.QtWidgets import QDialog
from PySide6.QtCore import Signal, Slot

from ui.Config import Ui_Dialog as ConfigDlg
from ui.About import Ui_Dialog as AboutDlg


class ConfigDialog(ConfigDlg, QDialog):
    """Handles the Configurations dialog of the application.

    The class inherits from `Pyside6.QtWidgets.QDialog`
    and `src.ui.Config.Ui_Dialog`.

    The GUI was made with QtDesigner. `Config.Ui_Dialog` is generated by
    pyside6-uic from the QtDesigner .ui file and can be found in
    `/ui/Config.py <https://github.com/gaaldvd/arxive/blob/main/src/ui/Config.py>`_
    in the repository.

    :ivar Signal config_updated: Emitted when configurations are saved.

    Methods:
        save():
            Saves configurations.
    """

    # Signal is emitted when saving configs
    config_updated = Signal(dict)

    def __init__(self, config, parent=None):
        super().__init__(parent)
        self.setupUi(self)

        # Default source/destination
        self.sourceEdit.setText(config.source)
        self.destEdit.setText(config.destination)
        self.sourceButton.clicked.connect(
            lambda: set_dir(self, "source"))
        self.destButton.clicked.connect(
            lambda: set_dir(self, "destination"))

        # Additional options
        if config.options:
            self.optionsEdit.setPlainText(", ".join(config.options))

        self.buttonBox.accepted.connect(lambda: self.save(config))


    @Slot()
    def save(self, config):
        """Update the attributes of :ref:`MainWindow.config <mainwindow-class>`
        and call :ref:`Config.save <save>`, then emit the
        :ref:`config_updated <configdialog-class>` signal.

        :param Config config: Configurations loaded by :ref:`Config.load <load>`
        """

        # Default source/destination
        config.source = self.sourceEdit.text()
        config.destination = self.destEdit.text()

        # Additional options
        config.options = list(set(
            self.optionsEdit.toPlainText().split(", "))) if (
            self.optionsEdit.toPlainText().strip()) else None
        if config.options:
            config.options = validate_options(config.options)

        # Saving configurations
        try:
            config.save()
            print("Configurations saved.")
        except (FileNotFoundError, PermissionError, OSError) as e:
            print(f"Error while saving configurations: {e}")

        # Emitting a signal for the slot `MainWindow.config_updated()`
        self.config_updated.emit(config)


class AboutDialog(AboutDlg, QDialog):
    """Handles the About dialog of the application.

    The class inherits from `Pyside6.QtWidgets.QDialog`
    and `src.ui.About.Ui_Dialog`.

    The GUI was made with QtDesigner. `About.Ui_Dialog` is generated by
    pyside6-uic from the QtDesigner .ui file and can be found in
    `/ui/About.py <https://github.com/gaaldvd/arxive/blob/main/src/ui/About.py>`_
    in the repository.

    :ivar str url: The URL of the GitHub repository.
    """

    # Repository URL
    url = "https://github.com/gaaldvd/arxive"

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

        self.description.setText("arXive: a CLI/GUI frontend for "
                                 "<a href='https://rsync.samba.org/'>rsync</a>")
        self.version.setText("v0.0")
        self.link.setText(f"<a href='{self.url}'>Visit GitHub page</a>")
